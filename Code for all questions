CREATE TABLE spotify
(
    artist VARCHAR(255),
    track VARCHAR(255),
    album VARCHAR(255),
    album_type VARCHAR(50),
    danceability FLOAT,
    energy FLOAT,
    loudness FLOAT,
    speechiness FLOAT,
    acousticness FLOAT,
    instrumentalness FLOAT,
    liveness FLOAT,
    valence FLOAT,
    tempo FLOAT,
    duration_min FLOAT,
    title VARCHAR(255),
    channel VARCHAR(255),
    views FLOAT,
    likes FLOAT,
    comments FLOAT,
    licensed BOOLEAN,
    official_video BOOLEAN,
    stream FLOAT,
    energy_liveness FLOAT,
    most_played_on VARCHAR(50)
);

DROP TABLE spotify;

SELECT * FROM spotify;
---------------------------------------------------------------------------------------------------------------------

--Q1. Retrieve the names of all tracks that have more than 1 billion streams.

SELECT track FROM spotify
WHERE stream > 1000000000;

---------------------------------------------------------------------------------------------------------------------

--Q2. List all albums along with their respective artists.

SELECT DISTINCT album, artist 
FROM spotify
ORDER BY album ASC;

---------------------------------------------------------------------------------------------------------------------

--Q3. Get the total number of comments for tracks where ‘licensed = TRUE’.

SELECT SUM(comments) AS total_comments
FROM spotify
WHERE licensed = 'true';

---------------------------------------------------------------------------------------------------------------------

--Q4. Find all tracks that belong to the album type ‘single’.

SELECT * FROM spotify
WHERE album_type ILIKE 'single';

---------------------------------------------------------------------------------------------------------------------

--Q5. Count the total number of tracks by each artist.

SELECT artist, COUNT(track) AS total_tracks
FROM spotify
GROUP BY artist
ORDER BY total_tracks ASC;

---------------------------------------------------------------------------------------------------------------------

--Q6. Calculate the average danceability of tracks in each album.

SELECT album, ROUND(AVG(danceability)::numeric, 2) AS avg_danceability
FROM spotify
GROUP BY album
ORDER BY avg_danceability DESC;

---------------------------------------------------------------------------------------------------------------------

--Q7. Find the top 5 tracks with the highest energy values.

SELECT track, energy
FROM spotify
ORDER BY energy DESC, track ASC
LIMIT 5;

---------------------------------------------------------------------------------------------------------------------

--Q8. List all tracks along with their views and likes where ‘official video = TRUE’.

SELECT track, SUM(views) AS total_views, SUM(likes) AS total_likes
FROM spotify
WHERE official_video::varchar ILIKE 'true'
GROUP BY track
ORDER BY total_views DESC, track ASC;

---------------------------------------------------------------------------------------------------------------------

--Q9. For each album, calculate the total views of all associated tracks.

SELECT album, track, SUM(views) AS total_views
FROM spotify
GROUP BY album, track
ORDER BY total_views DESC;

---------------------------------------------------------------------------------------------------------------------

--Q10. Retrieve the track names that have been streamed on Spotify more than YouTube.

WITH cte AS 
(
	SELECT track, 
		COALESCE(SUM(CASE WHEN most_played_on ILIKE 'Youtube' THEN stream END), 0) AS streams_on_youtube,
		COALESCE(SUM(CASE WHEN most_played_on ILIKE 'Spotify' THEN stream END), 0) AS streams_on_spotify
	FROM spotify
	GROUP BY track
)
SELECT * FROM cte
WHERE streams_on_spotify > streams_on_youtube AND streams_on_youtube != 0
ORDER BY track ASC;

---------------------------------------------------------------------------------------------------------------------

--Q11. Find the top 3 most-viewed tracks for each artist using window functions.

WITH cte AS(
			SELECT artist, track, SUM(views) AS total_views, 
			       DENSE_RANK() OVER(PARTITION BY artist ORDER BY SUM(views) DESC) AS rnk
			FROM spotify
			GROUP BY artist, track
           )
SELECT artist, track, total_views FROM cte
WHERE rnk<=3;

---------------------------------------------------------------------------------------------------------------------

--Q12. Write a query to find tracks where the liveness score is above the average.

SELECT track, liveness
FROM spotify
WHERE liveness > (SELECT ROUND( AVG(liveness)::numeric, 2 ) FROM spotify)
ORDER BY liveness DESC;

---------------------------------------------------------------------------------------------------------------------

--Q13. Use a WITH clause to calculate the difference between the highest and lowest energy values for tracks in each 
--     album.

WITH cte AS(
			SELECT album, MAX(energy) AS max_energy, MIN(energy) AS min_energy
			FROM spotify
			GROUP BY album
           )
SELECT album, ROUND( (max_energy-min_energy)::numeric, 3) AS max_min_energy_diff
FROM cte
ORDER BY 2 DESC;
